# Syntax of the software.ini file (looks better with Python syntax highlight):
#
# Comments start with a dash sign
# [Name of the category is enclosed in brackets]
#	# The next step is to define the OS, and eventually the Type of input and Suffix required by the files
#	OS = ["darwin", "linux2", "freebsd11", "win32"]   <- one or more values
#	Type = ["CLI", "File", "URL"] <- one or more values ("CLI" is the default)
#	Suffix = [".html", ".js"]     <- one or more values required when using the type File or URL
#		# Now is time to define the software
#		Name_of_Software = ["path/to/executable", "optional_parameter", "-fuzzdata=print [[test]]"]


# Sample fuzzing of a network connection using Stdin: nc scanme.nmap.org 80 < tmpfile
[http]
	Type = ["Stdin"] 
	OS = ["darwin", "linux2", "freebsd11"]
		scanme = ["nc", "-w", "1", "demo.testfire.net", "80", "-fuzzdata=[[test]]"]
		vps = ["nc", "-w", "1", "yuroapps.com", "80", "-fuzzdata=[[test]]"]

# Sample fuzzing for a basic program like more/less/cat using files as input
[more]
	Type = ["File"]
	OS = ["darwin", "linux2", "freebsd11"]
		more = ["more", "-fuzzdata=[[test]]"]
		less = ["less", "-fuzzdata=[[test]]"]
		cat = ["cat", "-fuzzdata=[[test]]"]
		tac = ["tac", "-fuzzdata=[[test]]"]
		tail = ["tail", "-c+0", "-fuzzdata=[[test]]"]
		head = ["head", "-c-0", "-fuzzdata=[[test]]"]
		pg = ["pg", "-e", "-fuzzdata=[[test]]"]

# Sample fuzzing of command line browsers using the CLI as input
[url]
	OS = ["darwin", "linux2", "freebsd11"]
		wget = ["wget", "-q", "-O-", "--tries=1", "--timeout=0.01", "-fuzzdata=[[test]]"]
		http = ["http", "-b", "-sdefault", "--timeout", "0.01", "-fuzzdata=[[test]]"]
		links = ["links", "-receive-timeout", "1", "-dump", "-fuzzdata=[[test]]"]
		lynx = ["lynx", "-dump", "-fuzzdata=[[test]]"]
		w3m = ["w3m", "-dump", "-fuzzdata=[[test]]"]
		php = ["php", "-r", "-fuzzdata=echo file_get_contents('[[test]]');"]
		curl = ["curl", "-s", "--retry", "1", "-m0,01", "-fuzzdata=[[test]]"]
		python = ["python", "-c", "-fuzzdata=import urllib2;response=urllib2.urlopen('[[test]]');print(response.read())"]
		ruby1 = ["ruby", "-e", "-fuzzdata=require 'net/http';print Net::HTTP.get(URI.parse('[[test]]'))"]
		ruby2 = ["ruby", "-e", "-fuzzdata=require 'open-uri';print open('[[test]]').read"]

# Sample fuzzing of Ruby using the CLI as input
[ruby]
	OS = ["darwin", "linux2", "freebsd11"]
		Ruby = ["ruby", "-e", "-fuzzdata=print [[test]]"]
		JRuby = ["jruby", "-e", "-fuzzdata=print [[test]]"]
	OS = ["win32"]
		Ruby = ["c:\\Ruby\\bin\\ruby.exe", "-e", "-fuzzdata=print [[test]]"]

# Sample fuzzing of Python using the CLI as input
[python]
	OS = ["darwin", "linux2", "freebsd11"]
		Python = ["python", "-c", "-fuzzdata=[[test]]"]
		PyPy = ["pypy", "-c", "-fuzzdata=[[test]]"]
		Jython = ["jython", "-c", "-fuzzdata=[[test]]"]
	OS = ["win32"]
		Python = ["c:\\Python27\\python.exe", "-c", "-fuzzdata=[[test]]"]
		PyPy = ["c:\\Pypy\\pypy.exe", "-c", "-fuzzdata=[[test]]"]
		Jython = ["java", "-jar", "c:\\jython\\jython.jar", "-c", "-fuzzdata=[[test]]"]

# Sample fuzzing of Javascript using the CLI and Files as input
[javascript]
	Type = ["CLI"]
	OS = ["darwin", "linux2", "freebsd11"]
		V8 = ["v8", "-e", "-fuzzdata=print([[test]])"]
		SpiderMonkey = ["js", "-e", "-fuzzdata=print([[test]])"]
		Node = ["node", "-e", "-fuzzdata=console.log([[test]])"]
		Rhino = ["java", "-jar", "/usr/local/bin/rhino.jar", "-e", "-fuzzdata=print([[test]])"]
	Type = ["File"]
	Suffix = [".js"]
		V8 = ["v8", "-e", "-fuzzdata=print([[test]])"]
		SpiderMonkey = ["js", "-e", "-fuzzdata=print([[test]])"]
		Node = ["node", "-e", "-fuzzdata=console.log([[test]])"]
		Rhino = ["java", "-jar", "/usr/local/bin/rhino.jar", "-e", "-fuzzdata=print([[test]])"]
		# MongoDB: set 'journal = false' in /etc/mongodb.conf to avoid the files written at /var/lib/mongodb/journal/
		MongoDB = ["mongo", "--quiet", "--nodb", "-fuzzdata=print([[test]])"]
		ChakraCore = ["/usr/local/ch/ch", "-fuzzdata=print([[test]])"]
		Gjs = ["/usr/local/bin/gjs-console", "-fuzzdata=print([[test]])"]
		Nashorn = ["jjs", "-fuzzdata=print([[test]]))"]
		# PhantomJS: apt install phantomjs / settings['db_tests'] must be a low number (<256?)
		PhantomJS = ["phantomjs", "-fuzzdata=console.log([[test]]);phantom.exit()"]
		# Jsc: apt install libjavascriptcoregtk-4.0-bin
		Jsc = ["jsc", "-fuzzdata=print([[test]])"]
	# Run some additional software for Windows
	OS = ["win32"]
		SpiderMonkey = ["win32\spidermonkey-1.8.5\js.exe", "-fuzzdata=print([[test]])"]

# Sample fuzzing they do at Mozilla: they uneval->eval->uneval something to see if it is the same as uneval something.
[javascript_assert]
	OS = ["darwin"]
	Type = ["CLI"]
		SpiderMonkey1 = ["js", "-e", "-fuzzdata=print(uneval(eval(uneval([[test]]))))"]
		SpiderMonkey2 = ["js", "-e", "-fuzzdata=print(uneval([[test]]))"]

# Sample fuzzing of PHP using OSX, Linux, Freebsd, and Windows using the CLI as input
[php]
	# PHP Settings: set 'error_reporting = 0' & 'display_errors = stderr' & 'log_errors = Off' & 'short_open_tag = On'
	Type = ["CLI"]
	OS = ["darwin"]
		PHP = ["php", "-r", "-fuzzdata=var_dump([[test]]);"]
	Type = ["File"]
	Suffix = [".php"]
		PHP = ["php", "-fuzzdata=var_dump([[test]]);"]
		HHVM = ["hhvm", "-c/private/etc/php.ini", "-fuzzdata=<?var_dump([[test]]);?>"]
	OS = ["linux2", "freebsd11"]
		PHP = ["php", "-fuzzdata=var_dump([[test]]);"]
		# set "-c/etc/hhvm/server.ini" to this configuration,  and 'hhvm.repo.commit=false' in /etc/hhvm/server.ini to avoid the cache ~/.hhvm.hhbc from being created BUT it will require double the time (delete that file on the monitor check class).
		HHVM = ["hhvm", "-c/etc/php/7.0/cli/php.ini", "-fuzzdata=<?var_dump([[test]]);?>"]
	OS = ["win32"]
		PHP = ["C:\\php\\php.exe", "-r", "-fuzzdata=var_dump([[test]]);"]

# Sample fuzzing of Perl using the CLI as input
[perl]
	OS = ["darwin", "linux2", "freebsd11"]
		Perl = ["perl", "-e", "-fuzzdata=print([[test]])"]
		ActivePerl = ["/opt/ActivePerl-5.24/bin/perl", "-e", "-fuzzdata=print [[test]]"]
	OS = ["win32"]
		Perl = ["c:\\Perl\\perl\\bin\\perl.exe", "-e", "-fuzzdata=print [[test]]"]

# Sample fuzzing of the crypt() functionality across applications and programming languages
[crypt]
	Type = ["CLI"]
	OS = ["darwin"]
		Perl = ["perl", "-e", "-fuzzdata=print crypt('[[test]]','[[test]][[test]]')"]
		Ruby = ["ruby", "-e", "-fuzzdata=print '[[test]]'.crypt('[[test]][[test]]')"]
		Python = ["python", "-c", "-fuzzdata=import crypt,sys;sys.stdout.write(crypt.crypt('[[test]]','[[test]][[test]]'))"]
	OS = ["linux2", "freebsd11"]
		PHP = ["php", "-r", "-fuzzdata=echo crypt('[[test]]','[[test]][[test]]');"]
		Perl = ["perl", "-e", "-fuzzdata=print crypt('[[test]]','[[test]][[test]]')"]
		Ruby = ["ruby", "-e", "-fuzzdata=print '[[test]]'.crypt('[[test]][[test]]')"]
		JRuby = ["jruby", "-e", "-fuzzdata=print '[[test]]'.crypt('[[test]][[test]]')"]
		Python = ["python", "-c", "-fuzzdata=import crypt,sys;sys.stdout.write(crypt.crypt('[[test]]','[[test]][[test]]'))"]
		Mkpasswd = ["mkpasswd", "-fuzzdata=[[test]]", "-m", "des", "-s", "[[test]][[test]]"]
	OS = ["win32"]
		PHP = ["c:\\php\\php.exe", "-r", "-fuzzdata=echo crypt('[[test]]','[[test]][[test]]');"]
		Perl = ["c:\\Perl\\perl\\bin\\perl.exe", "-e", "-fuzzdata=print crypt('[[test]]','[[test]][[test]]')"]
		Ruby = ["c:\\Ruby\\bin\\ruby.exe", "-e", "-fuzzdata=print '[[test]]'.crypt('[[test]][[test]]')"]
		Python = ["c:\\Python27\\python.exe", "-c", "-fuzzdata=import crypt,sys;sys.stdout.write(crypt.crypt('[[test]]','[[test]][[test]]'))"]

# Sample fuzzing of functions shared between some programming languages
[php_and_perl]
	OS = ["darwin", "linux2", "freebsd11"]
		PHP = ["php", "-r", "-fuzzdata=echo [[test]];"]
		Perl = ["perl", "-e", "-fuzzdata=print [[test]]"]
