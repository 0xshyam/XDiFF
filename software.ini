# Syntax of the software.ini file (looks better with Python syntax highlight):
#
# Comments start with a dash sign
# [Name of the category is enclosed in brackets]
#   # The next step is to define the OS, and eventually the Type of input and Suffix required by the files
#   OS = ["darwin", "linux2", "freebsd11", "win32"]   <- one or more values
#   Type = ["CLI", "File", "URL"] <- one or more values ("CLI" is the default)
#   Suffix = [".html", ".js"]     <- one or more values required when using the type File or URL
#     # Now is time to define the software
#     Name_of_Software = ["path/to/executable", "optional_parameter", "-fuzzdata=print [[test]]"]
#

# Sample fuzzing of Java using a pre-compiler function
[java]
	Type = ["File"]
	OS = ["darwin", "linux2"]
		openjdk = ["runjava.sh", "-fuzzdata=[[test]]"]

# Sample fuzzing of a network connection
[http]
	Type = ["Stdin"] # nc scanme.nmap.org 80 < tmpfile
	OS = ["darwin", "linux2", "freebsd11"]
		scanme = ["nc", "-w", "1", "scanme.nmap.org", "80", "-fuzzdata=[[test]]"]
		vps = ["nc", "-w", "1", "yuroapps.com", "80", "-fuzzdata=[[test]]"]

# Sample fuzzing of mp3 programs:
# wget -r http://samples.ffmpeg.org
# while read line; do ./dbaction.py -d more.sqlite -t value -s "NotHere" -i"`cat $line`"; done<<<"`find ./samples.ffmpeg.org -type f -size -1000c -name "*.*" -path "*.gif"|grep "\."`"
[mp3]
	Type = ["File"]
	OS = ["darwin", "linux2", "freebsd11"]
		mpg321 =    ["mpg321", "-q", "-fuzzdata=[[test]]"]
		mpg123 =    ["mpg123", "-q", "-fuzzdata=[[test]]"]
		mplayer =   ["mplayer", "-really-quiet", "-nolirc", "-fuzzdata=[[test]]"]
		sox =       ["play", "-q", "-fuzzdata=[[test]]"]
		audacious = ["audacious", "-q", "-fuzzdata=[[test]]"]
		vlc =       ["cvlc", "-q", "-fuzzdata=[[test]]"]

# Sample fuzzing for a basic program like more/less/ec
[more]
	Type = ["File"]
	OS = ["darwin", "linux2", "freebsd11"]
		more = ["more", "-fuzzdata=[[test]]"]
		less = ["less", "-fuzzdata=[[test]]"]
		cat = ["cat", "-fuzzdata=[[test]]"]
		tac = ["tac", "-fuzzdata=[[test]]"]
		tail = ["tail", "-c+0", "-fuzzdata=[[test]]"]
		head = ["head", "-c-0", "-fuzzdata=[[test]]"]
		pg = ["pg", "-e", "-fuzzdata=[[test]]"]

# Sample command line browsers
[URL]
	OS = ["darwin", "linux2", "freebsd11"]
		wget = ["wget", "-q", "-O-", "--tries=1", "--timeout=0.01", "-fuzzdata=[[test]]"]
		http = ["http", "-b", "-sdefault", "--timeout", "0.01", "-fuzzdata=[[test]]"]
		links = ["links", "-receive-timeout", "1", "-dump", "-fuzzdata=[[test]]"]
		lynx = ["lynx", "-dump", "-fuzzdata=[[test]]"]
		w3m = ["w3m", "-dump", "-fuzzdata=[[test]]"]
		php = ["php", "-r", "-fuzzdata=echo file_get_contents('[[test]]');"]
		#curl = ["curl", "-s", "--retry", "1", "-m0,01", "-fuzzdata=[[test]]"]
		#python = ["python", "-c", "-fuzzdata=import urllib2;response=urllib2.urlopen('[[test]]');print(response.read())"]
		#ruby1 = ["ruby", "-e", "-fuzzdata=require 'net/http';print Net::HTTP.get(URI.parse('[[test]]'))"]
		#ruby2 = ["ruby", "-e", "-fuzzdata=require 'open-uri';print open('[[test]]').read"]

# Sample Ruby
[Ruby]
	OS = ["darwin", "linux2", "freebsd11"]
		Ruby = ["ruby", "-e", "-fuzzdata=print [[test]]"]
		#JRuby = ["jruby", "-e", "-fuzzdata=print [[test]]"]
	OS = ["win32"]
		Ruby = ["c:\\Ruby\\bin\\ruby.exe", "-e", "-fuzzdata=print [[test]]"]

# Sample Python
[Python]
	OS = ["darwin", "linux2", "freebsd11"]
#		Python = ["python", "-c", "-fuzzdata=[[test]]"]
		PyPy = ["pypy", "-c", "-fuzzdata=[[test]]"]
		Jython = ["jython", "-c", "-fuzzdata=[[test]]"]
	OS = ["win32"]
		Python = ["c:\\Python27\\python.exe", "-c", "-fuzzdata=[[test]]"]
		PyPy = ["c:\\Pypy\\pypy.exe", "-c", "-fuzzdata=[[test]]"]
		Jython = ["java", "-jar", "c:\\jython\\jython.jar", "-c", "-fuzzdata=[[test]]"]

# Sample Javascript: the javascript may be output in the standard output, or it may be output by a web browser back to the fuzzer web server
[JavaScript]
	Type = ["CLI"]
	# Run at a minimum this pieces of software for OSX, Linux and Freebsd
	OS = ["darwin", "linux2", "freebsd11"]
		V8 = ["v8", "-e", "-fuzzdata=print([[test]])"]
		SpiderMonkey = ["js", "-e", "-fuzzdata=print([[test]])"]
		Node = ["node", "-e", "-fuzzdata=console.log([[test]])"]
		# Rhino = ["java", "-jar", "/usr/local/bin/rhino.jar", "-e", "-fuzzdata=print([[test]])"]
	Type = ["File"]
	Suffix = [".js"]
		V8 = ["v8", "-e", "-fuzzdata=print([[test]])"]
		SpiderMonkey= ["js", "-e", "-fuzzdata=print([[test]])"]
		Node = ["node", "-e", "-fuzzdata=console.log([[test]])"]
		# Rhino = ["java", "-jar", "/usr/local/bin/rhino.jar", "-e", "-fuzzdata=print([[test]])"]
		# MongoDB: set 'journal = false' in /etc/mongodb.conf to avoid the files written at /var/lib/mongodb/journal/
		# MongoDB = ["mongo", "--quiet", "--nodb", "-fuzzdata=print([[test]])"]
		# ChakraCore = ["/usr/local/ch/ch", "-fuzzdata=print([[test]])"]
		# Gjs = ["/usr/local/bin/gjs-console", "-fuzzdata=print([[test]])"]
		# Nashorn = ["jjs", "-fuzzdata=print([[test]]))"]
		# PhantomJS: apt install phantomjs / settings['db_tests'] must be a low number (<256?)
		# PhantomJS = ["phantomjs", "-fuzzdata=console.log([[test]]);phantom.exit()"]
		# Jsc: apt install libjavascriptcoregtk-4.0-bin
		# Jsc = ["jsc", "-fuzzdata=print([[test]])"]
	# Run some additional software for OSX
	OS = ["darwin"]
		# Chrome = ["/Applications/Google Chrome.app/Contents/MacOS/Google Chrome", "-fuzzdata=<html><script>var a=performance.now();function send(msg){xmlHttp=new XMLHttpRequest();xmlHttp.open('GET','[[url0]]?'+msg,false);xmlHttp.send(null);}</script><script>send('stdout='+String([[test]]))</script><script>send('elapsed='+String(performance.now()-a)/1000)</script></html>"]
		# Safari = ["/usr/bin/open", "-a", "safari", "-fuzzdata=<html><script>var a=performance.now();function send(msg){xmlHttp=new XMLHttpRequest();xmlHttp.open('GET','[[url0]]?'+msg,false);xmlHttp.send(null);}</script><script>send('stdout='+String([[test]]))</script><script>send('elapsed='+String(performance.now()-a)/1000)</script></html>"]
		# Firefox = ["/Applications/Firefox.app/Contents/MacOS/firefox-bin", "--new-window", "-fuzzdata=<html><script>var a=performance.now();function send(msg){xmlHttp=new XMLHttpRequest();xmlHttp.open('GET','[[url0]]?'+msg,false);xmlHttp.send(null);}</script><script>send('stdout='+String([[test]]))</script><script>send('elapsed='+String(performance.now()-a)/1000)</script></html>"]
		# Opera = ["/Applications/Opera.app/Contents/MacOS/Opera", "-fuzzdata=<html><script>var a=performance.now();function send(msg){xmlHttp=new XMLHttpRequest();xmlHttp.open('GET','[[url0]]?'+msg,false);xmlHttp.send(null);}</script><script>send('stdout='+String([[test]]))</script><script>send('elapsed='+String(performance.now()-a)/1000)</script></html>"]
	# Run some additional software for Linux
	OS = ["linux2"]
		Chrome = ["chromium-browser", "-fuzzdata=<html><script>var a=performance.now();function send(msg){xmlHttp=new XMLHttpRequest();xmlHttp.open('GET','[[url0]]?'+msg,false);xmlHttp.send(null);}</script><script>send('stdout='+String([[test]]))</script><script>send('elapsed='+String(performance.now()-a)/1000)</script></html>"]
	# Run some additional software for Windows
	OS = ["win32"]
		SpiderMonkey = ["win32\spidermonkey-1.8.5\js.exe", "-fuzzdata=print([[test]])"]
		Chrome = ["C:\Program Files (x86)\Google\Chrome\Application\chrome.exe", "-fuzzdata=<html><script>var a=performance.now();function send(msg){xmlHttp=new XMLHttpRequest();xmlHttp.open('GET','[[url0]]?'+msg,false);xmlHttp.send(null);}</script><script>send('stdout='+String([[test]]))</script><script>send('elapsed='+String(performance.now()-a)/1000)</script></html>"]
		IE = ["C:\Program Files\Internet Explorer\iexplore.exe", "-fuzzdata=<html><script>var a=performance.now();function send(msg){xmlHttp=new XMLHttpRequest();xmlHttp.open('GET','[[url0]]?'+msg,false);xmlHttp.send(null);}</script><script>send('stdout='+String([[test]]))</script><script>send('elapsed='+String(performance.now()-a)/1000)</script></html>"]
		Firefox = ["C:\Program Files (x86)\Mozilla Firefox\\firefox.exe", "-fuzzdata=<html><script>var a=performance.now();function send(msg){xmlHttp=new XMLHttpRequest();xmlHttp.open('GET','[[url0]]?'+msg,false);xmlHttp.send(null);}</script><script>send('stdout='+String([[test]]))</script><script>send('elapsed='+String(performance.now()-a)/1000)</script></html>"]

# Sample stuff they do at Mozilla: they uneval->eval->uneval something to see if it is the same as uneval something.
[JavaScript_Assert]
	OS = ["darwin"]
	Type = ["CLI"]
		SpiderMonkey = ["js", "-e", "-fuzzdata=print(uneval(eval(uneval([[test]])))==uneval([[test]]))"]
	Type = ["URL"]
	Suffix = [".html"]
		Firefox = ['/Applications/Firefox.app/Contents/MacOS/firefox-bin', '--new-window', "-fuzzdata=<html><script>var a=performance.now();function send(msg){xmlHttp=new XMLHttpRequest();xmlHttp.open('GET','[[url0]]?'+msg,false);xmlHttp.send(null);}</script><script>send('stdout='+String(uneval(eval(uneval([[test]])))==uneval([[test]])))</script><script>send('elapsed='+String(performance.now()-a)/1000)</script></html>"]

# Sample: PHP
[PHP]
	# PHP Settings: set 'error_reporting = 0' & 'display_errors = stderr' & 'log_errors = Off' & 'short_open_tag = On'
	Type = ["CLI"]
	OS = ["darwin"]
		PHP = ["php", "-r", "-fuzzdata=var_dump([[test]]);"]
	Type = ["File"]
	Suffix = [".php"]
		PHP = ["php", "-fuzzdata=var_dump([[test]]);"]
		HHVM = ["hhvm", "-c/private/etc/php.ini", "-fuzzdata=<?var_dump([[test]]);?>"]
	OS = ["linux2", "freebsd11"]
		PHP = ["php", "-fuzzdata=var_dump([[test]]);"]
		# set "-c/etc/hhvm/server.ini" to this configuration,  and 'hhvm.repo.commit=false' in /etc/hhvm/server.ini to avoid the cache ~/.hhvm.hhbc from being created BUT it will require double the time (delete that file on the monitor check class).
		HHVM = ["hhvm", "-c/etc/php/7.0/cli/php.ini", "-fuzzdata=<?var_dump([[test]]);?>"]
	OS = ["win32"]
		PHP =["C:\\php\\php.exe", "-r", "-fuzzdata=var_dump([[test]]);"]

# Sample: Perl
[Perl]
	OS = ["darwin", "linux2", "freebsd11"]
		Perl = ["perl", "-e", "-fuzzdata=print([[test]])"]
		ActivePerl = ["/opt/ActivePerl-5.24/bin/perl", "-e", "-fuzzdata=print [[test]]"]
	OS = ["win32"]
		Perl = ["c:\\Perl\\perl\\bin\\perl.exe", "-e", "-fuzzdata=print [[test]]"]

# Sample: you can find the differences between a CLI program vs a Web Browser processing the output
[VBScript]
	OS = ["win32"]
	Type = ["File"]
	Suffix = [".vbs"]
		cscript = ["c:\Windows\system32\cscript.exe", "/nologo", '-fuzzdata=Set fso = CreateObject ("Scripting.FileSystemObject") : Set stdout = fso.GetStandardStream (1) : stdout.WriteLine [[test]]']
	Type = ["URL"]
	Suffix = [".html"]
		IE = ["C:\Program Files\Internet Explorer\iexplore.exe", '-fuzzdata=<html><head><meta http-equiv="x-ua-compatible" content="IE=10"></head><body><script type="text/vbscript">StartTime = Timer() : Dim o : Set o = CreateObject("MSXML2.XMLHTTP") : o.open "GET","[[url0]]?stdout=" & cstr([[test]]), False : o.send : EndTime = FormatNumber(Timer() - StartTime, 10) : o.open "GET", "[[url0]]?elapsed=" & EndTime, False : o.send</script></body></html>']

# Sample: XSLT is normally fuzzed with XML documents, they require 2 files
[XSLT]
	OS = ["win32"]
	Type = ["File", "File"]
	Suffix = [".xsl", ".xml"]
		MSXSL = ["C:\Users\\fear\Documents\msxsl.exe", '-fuzzdata=<?xml-stylesheet type="text/xsl" href="[[file1]]"?><root/>', '-fuzzdata=<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:output encoding="iso-8859-1" method="text"/><xsl:template match="/"><xsl:value-of select="[[test]]"/></xsl:template></xsl:stylesheet>']
	OS = ["darwin", "linux2", "freebsd11"]
		XSLTProc = ['xsltproc', '-fuzzdata=<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:math="http://exslt.org/math" extension-element-prefixes="math"><xsl:output method="text"/><xsl:template match="/"><xsl:value-of select="[[test]]"/></xsl:template></xsl:stylesheet>', '-fuzzdata=<?xml-stylesheet type="text/xsl" href="[[file0]]"?><root/>']
		XalanJ = ['java','-jar', 'xalan.jar', '-XSL', '-fuzzdata=<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:math="http://exslt.org/math" extension-element-prefixes="math"><xsl:output method="text"/><xsl:template match="/"><xsl:value-of select="[[test]]"/></xsl:template></xsl:stylesheet>', '-IN', '-fuzzdata=<?xml-stylesheet type="text/xsl" href="[[file0]]"?><root/>']
	Suffix = [".xml", ".xsl"]
		XalanC = ['Xalan', '-fuzzdata=<?xml-stylesheet type="text/xsl" href="[[file0]]"?><root/>', '-fuzzdata=<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:math="http://exslt.org/math" extension-element-prefixes="math"><xsl:output method="text"/><xsl:template match="/"><xsl:value-of select="[[test]]"/></xsl:template></xsl:stylesheet>']
		Saxon = ['java', '-jar', 'saxon9he.jar', '-fuzzdata=<?xml-stylesheet type="text/xsl" href="[[file1]]"?><root/>', '-fuzzdata=<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:output method="text"/><xsl:template match="/"><xsl:value-of select="[[test]]"/></xsl:template></xsl:stylesheet>', '-versionmsg:off']
	Suffix = [".py"]
		Python = ['python', '-fuzzdata=from lxml import etree\nfrom StringIO import StringIO\nxsl = etree.XSLT(etree.XML("<xsl:stylesheet version=\\"1.0\\" xmlns:xsl=\\"http://www.w3.org/1999/XSL/Transform\\" xmlns:math=\\"http://exslt.org/math\\" extension-element-prefixes=\\"math\\"><xsl:output method=\\"text\\"/><xsl:template match=\\"/\\"><xsl:value-of select=\\"[[test]]\\"/></xsl:template></xsl:stylesheet>"))\nxml = etree.parse(StringIO("<root/>"))\nprint xsl(xml)\n']
	Suffix = [".php"]
		PHP = ['php', '-fuzzdata=<?php\n$xml_doc = new DOMDocument();\n$xml_doc->loadXML("<root/>");\n$xsl_doc = new DOMDocument();\n$xsl_doc->loadXML("<xsl:stylesheet version=\\"1.0\\" xmlns:xsl=\\"http://www.w3.org/1999/XSL/Transform\\" xmlns:math=\\"http://exslt.org/math\\" extension-element-prefixes=\\"math\\"><xsl:output method=\\"text\\"/><xsl:template match=\\"/\\"><xsl:value-of select=\\"[[test]]\\"/></xsl:template></xsl:stylesheet>");\n$proc = new XSLTProcessor();\n$proc->importStylesheet($xsl_doc);\n$newdom = $proc->transformToDoc($xml_doc);\nprint $newdom->saveHTML();\n?>']
	Suffix = [".rb"]
		Ruby = ['ruby', '-fuzzdata=require "nokogiri"\nxml = Nokogiri::XML("<root/>")\nxsl = Nokogiri::XSLT("<xsl:stylesheet version=\\"1.0\\" xmlns:xsl=\\"http://www.w3.org/1999/XSL/Transform\\" xmlns:math=\\"http://exslt.org/math\\" extension-element-prefixes=\\"math\\"><xsl:output method=\\"html\\"/><xsl:template match=\\"/\\"><xsl:value-of select=\\"[[test]]\\"/></xsl:template></xsl:stylesheet>")\nprint xsl.transform(xml)']
	OS = ["darwin"]
	Suffix = [".xml", ".xsl"]
		Opera = ['/Applications/Opera.app/Contents/MacOS/Opera', '-fuzzdata=<?xml-stylesheet type="text/xsl" href="[[url1]]"?>', '-fuzzdata=<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:math="http://exslt.org/math" extension-element-prefixes="math"><xsl:output omit-xml-declaration="yes"/><xsl:template match="/"><xsl:value-of select="[[test]]"/></xsl:template></xsl:stylesheet>']	
	Suffix = [".xhtml"]
		Chrome = ['/Applications/Google Chrome.app/Contents/MacOS/Google Chrome', '-fuzzdata=<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="[[file0]]"?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns="http://www.w3.org/1999/xhtml"><xsl:template match="xsl:stylesheet"><xsl:apply-templates/></xsl:template><xsl:template match="/"><html><script>var a=performance.now();function send(msg){xmlHttp=new XMLHttpRequest();xmlHttp.open("GET","[[url0]]?"+msg,false);xmlHttp.send(null);}</script><script>send("stdout="+String(<xsl:value-of select="[[test]]"/>))</script><script>send("elapsed="+String(performance.now()-a)/1000)</script></html></xsl:template></xsl:stylesheet>']

# Sample: some functions are present in all programming languages
[crypt]
	Type = ["CLI"]
	OS = ["darwin"]
		Perl = ["perl", "-e", "-fuzzdata=print crypt('[[test]]','[[test]][[test]]')"]
		Ruby = ["ruby", "-e", "-fuzzdata=print '[[test]]'.crypt('[[test]][[test]]')"]
		Python = ["python", "-c", "-fuzzdata=import crypt,sys;sys.stdout.write(crypt.crypt('[[test]]','[[test]][[test]]'))"]
	OS = ["linux2", "freebsd11"]
		PHP = ["php", "-r", "-fuzzdata=echo crypt('[[test]]','[[test]][[test]]');"]
		Perl = ["perl", "-e", "-fuzzdata=print crypt('[[test]]','[[test]][[test]]')"]
		Ruby = ["ruby", "-e", "-fuzzdata=print '[[test]]'.crypt('[[test]][[test]]')"]
		JRuby = ["jruby", "-e", "-fuzzdata=print '[[test]]'.crypt('[[test]][[test]]')"]
		Python = ["python", "-c", "-fuzzdata=import crypt,sys;sys.stdout.write(crypt.crypt('[[test]]','[[test]][[test]]'))"]
		Mkpasswd = ["mkpasswd", "-fuzzdata=[[test]]","-m","des","-s","[[test]][[test]]"]
	OS = ["win32"]
		PHP = ["c:\\php\\php.exe", "-r", "-fuzzdata=echo crypt('[[test]]','[[test]][[test]]');"]
		Perl = ["c:\\Perl\\perl\\bin\\perl.exe", "-e", "-fuzzdata=print crypt('[[test]]','[[test]][[test]]')"]
		Ruby = ["c:\\Ruby\\bin\\ruby.exe", "-e", "-fuzzdata=print '[[test]]'.crypt('[[test]][[test]]')"]
		Python = ["c:\\Python27\\python.exe", "-c", "-fuzzdata=import crypt,sys;sys.stdout.write(crypt.crypt('[[test]]','[[test]][[test]]'))"]

# Sample: some programming languages share a lot of functions with the same name
[PHP_and_Perl]
	OS = ["darwin", "linux2", "freebsd11"]
		PHP = ["php", "-r", "-fuzzdata=echo [[test]];"]
		Perl = ["perl", "-e", "-fuzzdata=print [[test]]"]

# Sample: shells
[SH]
	OS = ["darwin", "linux2", "freebsd11"]
		BASH = ["bash", "-c", "-fuzzdata=echo $(([[test]]))"]
		DASH = ["dash", "-c", "-fuzzdata=echo $(([[test]]))"]
		KSH  = ["ksh",  "-c", "-fuzzdata=echo $(([[test]]))"]

